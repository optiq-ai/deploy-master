{{!-- Szablon dla strony monitoringu --}}
<div class="row">
    <div class="col-md-12 mb-4">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Monitoring systemu</h5>
                <div>
                    <button class="btn btn-sm btn-outline-primary" onclick="refreshMonitoring()">Odśwież</button>
                    <a href="/monitoring/grafana" target="_blank" class="btn btn-sm btn-outline-secondary">Otwórz Grafana</a>
                    <a href="/monitoring/prometheus" target="_blank" class="btn btn-sm btn-outline-secondary">Otwórz Prometheus</a>
                </div>
            </div>
            <div class="card-body">
                <div class="alert alert-info" id="monitoring-status">
                    {{#if monitoringEnabled}}
                    Monitoring jest włączony. Poniżej znajdują się podstawowe metryki systemu.
                    {{else}}
                    Monitoring jest wyłączony. Aby włączyć monitoring, przejdź do <a href="/settings">Ustawień</a> i włącz opcję "Monitoring".
                    {{/if}}
                </div>
                
                {{#if monitoringEnabled}}
                <div class="row">
                    <div class="col-md-6">
                        <div class="card mb-3">
                            <div class="card-header">
                                <h6>Użycie CPU</h6>
                            </div>
                            <div class="card-body">
                                <div class="chart-container" style="position: relative; height:200px;">
                                    <canvas id="cpuChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card mb-3">
                            <div class="card-header">
                                <h6>Użycie pamięci</h6>
                            </div>
                            <div class="card-body">
                                <div class="chart-container" style="position: relative; height:200px;">
                                    <canvas id="memoryChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="row">
                    <div class="col-md-6">
                        <div class="card mb-3">
                            <div class="card-header">
                                <h6>Użycie dysku</h6>
                            </div>
                            <div class="card-body">
                                <div class="chart-container" style="position: relative; height:200px;">
                                    <canvas id="diskChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card mb-3">
                            <div class="card-header">
                                <h6>Ruch sieciowy</h6>
                            </div>
                            <div class="card-body">
                                <div class="chart-container" style="position: relative; height:200px;">
                                    <canvas id="networkChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <h5 class="mt-4 mb-3">Kontenery</h5>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Nazwa</th>
                                <th>Status</th>
                                <th>CPU</th>
                                <th>Pamięć</th>
                                <th>Sieć (RX/TX)</th>
                                <th>Uptime</th>
                            </tr>
                        </thead>
                        <tbody id="containers-table">
                            <tr>
                                <td colspan="6" class="text-center">Ładowanie danych...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                {{/if}}
            </div>
        </div>
    </div>
</div>

{{#if monitoringEnabled}}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Konfiguracja wykresów
    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        animation: {
            duration: 1000
        },
        scales: {
            y: {
                beginAtZero: true
            }
        }
    };
    
    // Dane dla wykresów
    const cpuData = {
        labels: [],
        datasets: [{
            label: 'Użycie CPU (%)',
            data: [],
            borderColor: 'rgba(75, 192, 192, 1)',
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            tension: 0.4
        }]
    };
    
    const memoryData = {
        labels: [],
        datasets: [{
            label: 'Użycie pamięci (MB)',
            data: [],
            borderColor: 'rgba(54, 162, 235, 1)',
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            tension: 0.4
        }]
    };
    
    const diskData = {
        labels: [],
        datasets: [{
            label: 'Użycie dysku (%)',
            data: [],
            borderColor: 'rgba(255, 159, 64, 1)',
            backgroundColor: 'rgba(255, 159, 64, 0.2)',
            tension: 0.4
        }]
    };
    
    const networkData = {
        labels: [],
        datasets: [
            {
                label: 'Pobieranie (KB/s)',
                data: [],
                borderColor: 'rgba(153, 102, 255, 1)',
                backgroundColor: 'rgba(153, 102, 255, 0.2)',
                tension: 0.4
            },
            {
                label: 'Wysyłanie (KB/s)',
                data: [],
                borderColor: 'rgba(255, 99, 132, 1)',
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                tension: 0.4
            }
        ]
    };
    
    // Inicjalizacja wykresów
    let cpuChart, memoryChart, diskChart, networkChart;
    
    document.addEventListener('DOMContentLoaded', function() {
        // Inicjalizacja wykresów
        cpuChart = new Chart(
            document.getElementById('cpuChart'),
            {
                type: 'line',
                data: cpuData,
                options: chartOptions
            }
        );
        
        memoryChart = new Chart(
            document.getElementById('memoryChart'),
            {
                type: 'line',
                data: memoryData,
                options: chartOptions
            }
        );
        
        diskChart = new Chart(
            document.getElementById('diskChart'),
            {
                type: 'line',
                data: diskData,
                options: chartOptions
            }
        );
        
        networkChart = new Chart(
            document.getElementById('networkChart'),
            {
                type: 'line',
                data: networkData,
                options: chartOptions
            }
        );
        
        // Pobieranie danych
        loadMonitoringData();
        loadContainersData();
        
        // Odświeżanie danych co 10 sekund
        setInterval(loadMonitoringData, 10000);
        setInterval(loadContainersData, 10000);
    });
    
    // Funkcja do ładowania danych monitoringu
    function loadMonitoringData() {
        fetch('/api/monitoring/metrics')
            .then(response => response.json())
            .then(data => {
                if (data.status) {
                    // Aktualizacja danych CPU
                    cpuData.labels.push(new Date().toLocaleTimeString());
                    cpuData.datasets[0].data.push(data.data.cpu);
                    
                    // Ograniczenie liczby punktów na wykresie
                    if (cpuData.labels.length > 10) {
                        cpuData.labels.shift();
                        cpuData.datasets[0].data.shift();
                    }
                    
                    // Aktualizacja danych pamięci
                    memoryData.labels.push(new Date().toLocaleTimeString());
                    memoryData.datasets[0].data.push(data.data.memory);
                    
                    if (memoryData.labels.length > 10) {
                        memoryData.labels.shift();
                        memoryData.datasets[0].data.shift();
                    }
                    
                    // Aktualizacja danych dysku
                    diskData.labels.push(new Date().toLocaleTimeString());
                    diskData.datasets[0].data.push(data.data.disk);
                    
                    if (diskData.labels.length > 10) {
                        diskData.labels.shift();
                        diskData.datasets[0].data.shift();
                    }
                    
                    // Aktualizacja danych sieci
                    networkData.labels.push(new Date().toLocaleTimeString());
                    networkData.datasets[0].data.push(data.data.network.rx);
                    networkData.datasets[1].data.push(data.data.network.tx);
                    
                    if (networkData.labels.length > 10) {
                        networkData.labels.shift();
                        networkData.datasets[0].data.shift();
                        networkData.datasets[1].data.shift();
                    }
                    
                    // Aktualizacja wykresów
                    cpuChart.update();
                    memoryChart.update();
                    diskChart.update();
                    networkChart.update();
                }
            })
            .catch(error => {
                console.error('Błąd podczas pobierania danych monitoringu:', error);
            });
    }
    
    // Funkcja do ładowania danych kontenerów
    function loadContainersData() {
        fetch('/api/monitoring/containers')
            .then(response => response.json())
            .then(data => {
                if (data.status) {
                    const containersTable = document.getElementById('containers-table');
                    containersTable.innerHTML = '';
                    
                    data.data.forEach(container => {
                        const row = document.createElement('tr');
                        
                        const nameCell = document.createElement('td');
                        nameCell.textContent = container.name;
                        
                        const statusCell = document.createElement('td');
                        const statusBadge = document.createElement('span');
                        statusBadge.className = `badge bg-${container.status === 'running' ? 'success' : 'danger'}`;
                        statusBadge.textContent = container.status;
                        statusCell.appendChild(statusBadge);
                        
                        const cpuCell = document.createElement('td');
                        cpuCell.textContent = container.cpu + '%';
                        
                        const memoryCell = document.createElement('td');
                        memoryCell.textContent = container.memory;
                        
                        const networkCell = document.createElement('td');
                        networkCell.textContent = `${container.network.rx} / ${container.network.tx}`;
                        
                        const uptimeCell = document.createElement('td');
                        uptimeCell.textContent = container.uptime;
                        
                        row.appendChild(nameCell);
                        row.appendChild(statusCell);
                        row.appendChild(cpuCell);
                        row.appendChild(memoryCell);
                        row.appendChild(networkCell);
                        row.appendChild(uptimeCell);
                        
                        containersTable.appendChild(row);
                    });
                }
            })
            .catch(error => {
                console.error('Błąd podczas pobierania danych kontenerów:', error);
            });
    }
    
    // Funkcja do odświeżania monitoringu
    function refreshMonitoring() {
        loadMonitoringData();
        loadContainersData();
    }
</script>
{{/if}}
